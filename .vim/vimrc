"Grab the global vimrc"
"source $VIM\_vimrc
source $VIM/vimrc

"----- Windows OS settings -----"
"set runtimepath+="H:/","H:/.vim"
" setting the vim shell to powershell
"set shell="C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe"
" setting the vim shell to cmd
set shell=C:\Windows\System32\cmd.exe
set shellquote="("
set shellcmdflag="/K"
"set shellxescape="\"&|<>()@^"

"
"----- Misc Temp files -----"
set backupdir=$HOME/.vim/tmp//
set directory=$HOME/.vim/tmp//
set undodir=$HOME/.vim/tmp//

set hidden "Throw modified but unsaved buffers in the 'background'
" make sure to save your work before exiting

set viminfo='10,<50,s10,h,rA:,rB:


colorscheme PaperColor
let g:PaperColor_Theme_Options = {'theme' : {'default': {'transparent_background': 1}}}
"colorscheme solarized "https://github.com/altercation/vim-colors-solarized
"colorscheme gruvbox "https://github.com/morhetz/gruvbox
"colorscheme  base16-irblack

set laststatus=2 "show the status bar the whole time
set background=dark "sets the background as used by gruvbox dark | light
set wrap "It doesn't change the text in the buffer. Lines longer than the width of the window will wrap and displaying continues on the next line.
set linebreak "If on, Vim will wrap long lines at a character in 'breakat' rather than at the last character that fits on the screen.
set number "sets the line numbers shown
set relativenumber "sets the line number to relative position

set spellsuggest+=10
set spellfile=$HOME/.vim/spell/tech.en-us.add
" notes about tabs and indenting
" https://stackoverflow.com/questions/1878974/redefine-tab-as-4-spaces
" Setting some text / page formatting
set autoindent " automagically remember indent in new lines
set smartindent " uses automagic indenting and understands some C code conventions
set tabstop=8 "hard tab stops at certain characters
set smarttab "uses sw st and ts but remembers for <BS>
set softtabstop=2 "use with shiftwidt to set tab char value without changing tab setting
set shiftwidth=2 "The number of characters that indent when you choose > indentation
set noexpandtab "don't use spaces use <tab> instead

" setting the special character values
set listchars=tab:¿¿¬,space:¿,nbsp:¤,trail:°,eol:¶,precedes:«,extends:»

"source $HOME/.vim/lastsession.vim

" ----- Markdown specific settings -----
let g:markdown_fenced_languages=['html', 'python', 'bash=sh', 'sh', 'dosini', 'dosbatch', 'cpp']
let g:markdown_fenced_languages+=['javascript', 'css', 'ps1', 'js=javascript']
let g:markdown_folding=1

"VIM markdown highlighting "underscore hack"
syn match markdownError "\w\@<=\w\@="

"----- lightweight status bar -----"
source $HOME/.vim/vimrc_statusbar.vim

"----- Custom Keys -----"
source $HOME/.vim/vimrc_keys.vim

"----- GUI settings -----"
source $HOME/.vim/vimrc_gui.vim
source $HOME/.vim/vimrc_gui-keys.vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Custom Key Mappings
"
"saving some little finger strain by re-mapping the esc key
"https://vi.stackexchange.com/questions/16963/remap-esc-key-in-vim

" esc in insert mode
inoremap kj <esc>

" esc in command mode
cnoremap kj <C-C>
" " Note: In command mode mappings to esc run the command for some odd
" " historical vi compatibility reason. We use the alternate method of
" " existing which is Ctrl-C

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://medium.com/@sszreter/vim-tab-autocomplete-in-insert-mode-and-fuzzy-search-for-opening-files-484260f52618
" MULTIPURPOSE TAB KEY
" " Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""



